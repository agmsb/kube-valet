// +build !ignore_autogenerated

/*
Copyright 2018 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by openapi-gen. Do not edit it manually!

package openapi

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/domoinc/kube-valet/pkg/apis/assignments/v1alpha1.AssignmentStates": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "AssignmentStates reports the satisfaction for each assignment",
					Properties: map[string]spec.Schema{
						"name": {
							SchemaProps: spec.SchemaProps{
								Description: "Name is the name of the assignment",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"numAssigned": {
							SchemaProps: spec.SchemaProps{
								Description: "NumSatisfied represents the number of nodes that were assigned",
								Type:        []string{"integer"},
								Format:      "int64",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"github.com/domoinc/kube-valet/pkg/apis/assignments/v1alpha1.ClusterPodAssignmentRule": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ClusterPodAssignmentRule defines PodAssignmentRules that are applied cluster-wide",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Description: "Spec defines the behavior of the rule",
								Ref:         ref("github.com/domoinc/kube-valet/pkg/apis/assignments/v1alpha1.PodAssignmentRuleSpec"),
							},
						},
					},
					Required: []string{"spec"},
				},
			},
			Dependencies: []string{
				"github.com/domoinc/kube-valet/pkg/apis/assignments/v1alpha1.PodAssignmentRuleSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"github.com/domoinc/kube-valet/pkg/apis/assignments/v1alpha1.ClusterPodAssignmentRuleList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ClusterPodAssignmentRuleList is a list of ClusterPodAssignmentRules",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/domoinc/kube-valet/pkg/apis/assignments/v1alpha1.ClusterPodAssignmentRule"),
										},
									},
								},
							},
						},
					},
					Required: []string{"items"},
				},
			},
			Dependencies: []string{
				"github.com/domoinc/kube-valet/pkg/apis/assignments/v1alpha1.ClusterPodAssignmentRule", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"github.com/domoinc/kube-valet/pkg/apis/assignments/v1alpha1.NodeAssignment": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "NodeAssignment describes the assignments possible for the group and the number of nodes for the assignment",
					Properties: map[string]spec.Schema{
						"name": {
							SchemaProps: spec.SchemaProps{
								Description: "Name is used when applying the assignment label to the nodes",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"mode": {
							SchemaProps: spec.SchemaProps{
								Description: "GroupMode determines whether labels, taints, labels and taints, or nothing is applied to nodes that match the group",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"taintEffect": {
							SchemaProps: spec.SchemaProps{
								Description: "TaintEffect controls the effect of the taint. Possible values come from the upstream type",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"numDesired": {
							SchemaProps: spec.SchemaProps{
								Description: "NumDesired is the number of nodes that should be assigned to this group. Default: 0 when specified along with PercentDesired, whichever request results in the most nodes is used",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"percentDesired": {
							SchemaProps: spec.SchemaProps{
								Description: "PercentDesired is the number percentage of matching nodes that should be assigned to this group. Default: 0 when specified along with NumDesired, whichever request results in the most nodes is used",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"schedulingMode": {
							SchemaProps: spec.SchemaProps{
								Description: "SchedulingMode determins what kind of scheduling alteration to use on the assignment do no scheduling alterations by default",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"packLeft": {
							SchemaProps: spec.SchemaProps{
								Description: "PackLeft holds configuration options and values here are only used when the SchedulingMode is \"PackLeft\"",
								Ref:         ref("github.com/domoinc/kube-valet/pkg/apis/assignments/v1alpha1.PackLeftScheduling"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/domoinc/kube-valet/pkg/apis/assignments/v1alpha1.PackLeftScheduling"},
		},
		"github.com/domoinc/kube-valet/pkg/apis/assignments/v1alpha1.NodeAssignmentGroup": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "NodeAssignmentGroup represents the configuration of a group of nodes that will be auto-labeled",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Description: "Spec defines the group and it's assignments",
								Ref:         ref("github.com/domoinc/kube-valet/pkg/apis/assignments/v1alpha1.NodeAssignmentGroupSpec"),
							},
						},
						"status": {
							SchemaProps: spec.SchemaProps{
								Description: "Status represents the current status of the group assignments.",
								Ref:         ref("github.com/domoinc/kube-valet/pkg/apis/assignments/v1alpha1.NodeAssignmentGroupStatus"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/domoinc/kube-valet/pkg/apis/assignments/v1alpha1.NodeAssignmentGroupSpec", "github.com/domoinc/kube-valet/pkg/apis/assignments/v1alpha1.NodeAssignmentGroupStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"github.com/domoinc/kube-valet/pkg/apis/assignments/v1alpha1.NodeAssignmentGroupList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "NodeAssignmentGroupList is a list of NodeAssignmentGroups",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Description: "Items is a list of NodeAssignmentGroups",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/domoinc/kube-valet/pkg/apis/assignments/v1alpha1.NodeAssignmentGroup"),
										},
									},
								},
							},
						},
					},
					Required: []string{"items"},
				},
			},
			Dependencies: []string{
				"github.com/domoinc/kube-valet/pkg/apis/assignments/v1alpha1.NodeAssignmentGroup", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"github.com/domoinc/kube-valet/pkg/apis/assignments/v1alpha1.NodeAssignmentGroupSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "NodeAssignmentGroupSpec describes the group and it's assignments",
					Properties: map[string]spec.Schema{
						"targetLabels": {
							SchemaProps: spec.SchemaProps{
								Description: "TargetLabels is optional. If not provided, the group will match all nodes in the cluster.",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"defaultAssignment": {
							SchemaProps: spec.SchemaProps{
								Description: "Assignments is the array of assignments to be applied. This list should be ordered by the user with the most important assignments first.",
								Ref:         ref("github.com/domoinc/kube-valet/pkg/apis/assignments/v1alpha1.NodeAssignment"),
							},
						},
						"assignments": {
							VendorExtensible: spec.VendorExtensible{
								Extensions: spec.Extensions{
									"x-kubernetes-patch-strategy": "merge",
								},
							},
							SchemaProps: spec.SchemaProps{
								Description: "Assignments is the array of assignments to be applied. This list should be ordered by the user with the most important assignments first.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/domoinc/kube-valet/pkg/apis/assignments/v1alpha1.NodeAssignment"),
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/domoinc/kube-valet/pkg/apis/assignments/v1alpha1.NodeAssignment"},
		},
		"github.com/domoinc/kube-valet/pkg/apis/assignments/v1alpha1.NodeAssignmentGroupStatus": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "NodeAssignmentGroupStatus represents the current status of the group.",
					Properties: map[string]spec.Schema{
						"numMatched": {
							SchemaProps: spec.SchemaProps{
								Description: "NumMatched represents the number of nodes that matched the targetlabels",
								Type:        []string{"integer"},
								Format:      "int64",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"github.com/domoinc/kube-valet/pkg/apis/assignments/v1alpha1.PackLeftScheduling": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "PackLeftScheduling holds configuration for PackLeft assignments",
					Properties: map[string]spec.Schema{
						"fullPercent": {
							SchemaProps: spec.SchemaProps{
								Description: "FullPercent defines percent of the Metric that must be used for a node to be considered \"Full\"",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"numAvoid": {
							SchemaProps: spec.SchemaProps{
								Description: "NumAvoid indiciates the number of nodes to be set to \"Avoid\" for the given assignment. Assignments with few nodes should be fine with a buffer of 1, But very large cluster may be better off with a larger number. Default: 1",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"percentAvoid": {
							SchemaProps: spec.SchemaProps{
								Description: "PercentAvoid indiciates a percentage of nodes to be set to \"Avoid\" for the given assignment when specified along with NumAvoid, whichever request results in the most nodes is used",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"github.com/domoinc/kube-valet/pkg/apis/assignments/v1alpha1.PodAssignmentRule": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "PodAssignmentRule describes pods to match and attributes to apply to them",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Description: "Spec defines the behavior of the rule",
								Ref:         ref("github.com/domoinc/kube-valet/pkg/apis/assignments/v1alpha1.PodAssignmentRuleSpec"),
							},
						},
					},
					Required: []string{"spec"},
				},
			},
			Dependencies: []string{
				"github.com/domoinc/kube-valet/pkg/apis/assignments/v1alpha1.PodAssignmentRuleSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"github.com/domoinc/kube-valet/pkg/apis/assignments/v1alpha1.PodAssignmentRuleList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "PodAssignmentRuleList is a list of PodAssignmentRules",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/domoinc/kube-valet/pkg/apis/assignments/v1alpha1.PodAssignmentRule"),
										},
									},
								},
							},
						},
					},
					Required: []string{"items"},
				},
			},
			Dependencies: []string{
				"github.com/domoinc/kube-valet/pkg/apis/assignments/v1alpha1.PodAssignmentRule", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"github.com/domoinc/kube-valet/pkg/apis/assignments/v1alpha1.PodAssignmentRuleScheduling": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "PodAssignmentRuleScheduling defines the scheduling objects to be applied to the pod",
					Properties: map[string]spec.Schema{
						"mergeStrategy": {
							SchemaProps: spec.SchemaProps{
								Description: "MergeStrategy defines the behavior of the rule when pods already have existing scheduling details defined",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"nodeSelector": {
							SchemaProps: spec.SchemaProps{
								Description: "NodeSelector is a simple key-value matching for nodes",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"affinity": {
							SchemaProps: spec.SchemaProps{
								Description: "Affinity is the upstream pod affinity resource",
								Ref:         ref("k8s.io/api/core/v1.Affinity"),
							},
						},
						"tolerations": {
							VendorExtensible: spec.VendorExtensible{
								Extensions: spec.Extensions{
									"x-kubernetes-patch-strategy": "merge",
								},
							},
							SchemaProps: spec.SchemaProps{
								Description: "Tolerations is a list of upstream pod toleration resources",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.Toleration"),
										},
									},
								},
							},
						},
					},
					Required: []string{"mergeStrategy"},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.Affinity", "k8s.io/api/core/v1.Toleration"},
		},
		"github.com/domoinc/kube-valet/pkg/apis/assignments/v1alpha1.PodAssignmentRuleSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "PodAssignmentRuleSpec defines the behavior of the PodAssignmentRule",
					Properties: map[string]spec.Schema{
						"targetLabels": {
							SchemaProps: spec.SchemaProps{
								Description: "TargetLabels defines which pods this rule will be applied to. Optional. When not given, the rule will match all pods.",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"scheduling": {
							SchemaProps: spec.SchemaProps{
								Description: "Scheduling defines the scheduling objects to be applied to the pod",
								Ref:         ref("github.com/domoinc/kube-valet/pkg/apis/assignments/v1alpha1.PodAssignmentRuleScheduling"),
							},
						},
					},
					Required: []string{"scheduling"},
				},
			},
			Dependencies: []string{
				"github.com/domoinc/kube-valet/pkg/apis/assignments/v1alpha1.PodAssignmentRuleScheduling"},
		},
	}
}
